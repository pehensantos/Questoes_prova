1 - Qual √© o conceito de ciclo de vida de um software?
	O ciclo de vida de um software √© o conjunto de fases ou etapas que um software percorre desde a sua concep√ß√£o at√© a sua descontinua√ß√£o.

ENVOLVE:
Levantamento e an√°lise de requisitos ‚Äì identificar as necessidades do cliente ou usu√°rio e definir o que o software deve fazer.

Projeto (design) ‚Äì planejar a arquitetura do sistema, a interface, banco de dados e as tecnologias que ser√£o usadas.

Implementa√ß√£o (codifica√ß√£o) ‚Äì escrever o c√≥digo do software conforme o projeto.

Testes ‚Äì verificar se o software funciona corretamente, atende aos requisitos e est√° livre de falhas.

Implanta√ß√£o (ou entrega) ‚Äì disponibilizar o software para uso real.

Manuten√ß√£o ‚Äì corrigir erros, melhorar funcionalidades ou adaptar a novas necessidades.

Descontinua√ß√£o ‚Äì quando o software deixa de ser usado, substitu√≠do ou aposentado.




2- Qual √© a diferen√ßa entre um produto manufaturado e um produto software?

üîπ Produto manufaturado (bem f√≠sico)

Tang√≠vel: pode ser tocado (ex.: carro, celular, cadeira).

Produ√ß√£o em s√©rie: cada unidade √© fabricada fisicamente, geralmente em linha de produ√ß√£o.

Custo de reprodu√ß√£o: cada c√≥pia exige mat√©ria-prima e m√£o de obra.

Defeitos: normalmente aparecem no processo de fabrica√ß√£o (pe√ßas quebradas, montagem incorreta).

Desgaste: sofre deteriora√ß√£o f√≠sica com o tempo.

Distribui√ß√£o: depende de transporte, armazenamento e log√≠stica.

üîπ Produto software

Intang√≠vel: n√£o pode ser tocado, √© um conjunto de instru√ß√µes e dados.

Produ√ß√£o em s√©rie: uma vez desenvolvido, pode ser copiado/distribu√≠do infinitamente.

Custo de reprodu√ß√£o: quase zero (n√£o precisa de mat√©ria-prima, apenas de m√≠dia ou download).

Defeitos: n√£o ‚Äúquebra fisicamente‚Äù, mas pode conter erros de l√≥gica ou programa√ß√£o.

Desgaste: n√£o se deteriora, mas pode ficar obsoleto (tecnologia ultrapassada, incompatibilidades).

Distribui√ß√£o: pode ser entregue instantaneamente via download, nuvem ou m√≠dia digital.




3- Na etapa de an√°lise do ciclo de vida de um software que atividades s√£o realizadas?

Levantamento de requisitos:

Entrevistas, question√°rios, observa√ß√µes ou an√°lise de documentos para identificar as necessidades do cliente/usu√°rio.

An√°lise de requisitos funcionais e n√£o funcionais:

Funcionais: descrevem o que o sistema deve fazer (ex.: ‚Äúo sistema deve gerar relat√≥rios mensais de vendas‚Äù).

N√£o funcionais: descrevem restri√ß√µes ou qualidades (ex.: desempenho, seguran√ßa, usabilidade, compatibilidade).

Modelagem do sistema:

Cria√ß√£o de diagramas (casos de uso, fluxogramas, modelos de dados) para representar graficamente os processos e intera√ß√µes.

Defini√ß√£o do escopo:

Estabelecer claramente os limites do sistema, o que estar√° inclu√≠do e o que ficar√° fora do projeto.

Valida√ß√£o dos requisitos:

Revisar com o cliente e as partes interessadas para confirmar que tudo o que foi levantado est√° correto, completo e vi√°vel.

Documenta√ß√£o dos requisitos:

Produ√ß√£o do Documento de Requisitos ou Especifica√ß√£o de Requisitos de Software (ERS/SRS), que servir√° de base para as pr√≥ximas fases.





4- Na etapa de projeto do ciclo de vida de um software que atividades s√£o realizadas?

 Na etapa de projeto (design) do ciclo de vida de um software, o foco muda: se na an√°lise foi definido o que o sistema deve fazer, agora define-se como ele ser√° constru√≠do.

As principais atividades s√£o:

üîπ 1. Projeto da arquitetura do sistema

Defini√ß√£o da estrutura geral do software (camadas, m√≥dulos, componentes).

Escolha de tecnologias, frameworks, linguagens e padr√µes arquiteturais (ex.: MVC, microsservi√ßos, cliente-servidor).




üîπ 2. Projeto da base de dados

Modelagem dos dados: cria√ß√£o de diagramas entidade-relacionamento (DER).

Defini√ß√£o de tabelas, chaves prim√°rias, relacionamentos e restri√ß√µes.




üîπ 3. Projeto da interface com o usu√°rio (UI/UX)

Especifica√ß√£o de telas, formul√°rios, menus e relat√≥rios.

Prot√≥tipos (wireframes) para validar a usabilidade e a navega√ß√£o.




üîπ 4. Projeto detalhado dos m√≥dulos

Descri√ß√£o de como cada m√≥dulo/fun√ß√£o ser√° implementado.

Uso de diagramas (UML, fluxogramas, diagramas de sequ√™ncia) para representar o comportamento interno.




üîπ 5. Defini√ß√£o de padr√µes e boas pr√°ticas

Estabelecimento de conven√ß√µes de codifica√ß√£o.

Defini√ß√£o de regras de seguran√ßa, escalabilidade e desempenho.




üîπ 6. Prepara√ß√£o da documenta√ß√£o t√©cnica

Cria√ß√£o de documentos que servir√£o de guia para os programadores na fase de implementa√ß√£o.



5- Qual √© a diferen√ßa entre o modelo cascata e prototipagem?

üîπ Modelo em Cascata

Sequencial e r√≠gido: as etapas seguem uma ordem fixa (An√°lise ‚Üí Projeto ‚Üí Implementa√ß√£o ‚Üí Testes ‚Üí Manuten√ß√£o).

Cada fase s√≥ come√ßa quando a anterior termina.

Produz muita documenta√ß√£o antes da codifica√ß√£o.

Bom para projetos com requisitos claros e est√°veis.

Desvantagem: se o cliente mudar de ideia depois, √© dif√≠cil voltar atr√°s sem retrabalho.

üîπ Modelo de Prototipagem

Iterativo e flex√≠vel: constr√≥i-se uma vers√£o inicial (prot√≥tipo) do sistema rapidamente, que √© apresentada ao cliente.

O cliente avalia, sugere mudan√ßas e o prot√≥tipo √© refinado at√© chegar na vers√£o final.

Foca em experimentar e validar requisitos antes da constru√ß√£o definitiva.

√ötil quando os requisitos est√£o mal definidos ou incertos.

Desvantagem: pode gerar expectativas irreais (usu√°rio achar que o prot√≥tipo j√° √© o sistema final).

üëâ Resumo da diferen√ßa principal:

No cascata, tudo √© planejado antes da implementa√ß√£o e segue uma sequ√™ncia r√≠gida.

Na prototipagem, o software √© constru√≠do em vers√µes preliminares para valida√ß√£o cont√≠nua com o cliente, aceitando mudan√ßas ao longo do processo.




6- O Que significa escopo de um sistema?

O escopo de um sistema √© a defini√ß√£o clara dos limites e objetivos do software:

Determina o que o sistema vai fazer (funcionalidades inclu√≠das).

Determina tamb√©m o que o sistema n√£o vai fazer (funcionalidades exclu√≠das).

Serve para alinhar as expectativas entre clientes, usu√°rios e equipe de desenvolvimento, evitando mal-entendidos.

üîπ Elementos do escopo

Objetivo do sistema ‚Äì por que ele est√° sendo desenvolvido (ex.: automatizar o controle de vendas de uma loja).

Funcionalidades principais ‚Äì as tarefas que o sistema deve realizar (ex.: cadastrar clientes, registrar vendas, gerar relat√≥rios).

Limita√ß√µes e exclus√µes ‚Äì o que n√£o est√° inclu√≠do (ex.: o sistema n√£o far√° controle de estoque).

P√∫blico-alvo ‚Äì quem usar√° o sistema (ex.: atendentes, gerentes).

üëâ Em resumo:
O escopo define as fronteiras do projeto, ou seja, at√© onde o sistema vai. √â como um ‚Äúmapa‚Äù que guia o desenvolvimento para que n√£o haja desvios ou expectativas irreais.



7- Defina requisitos de software e mostre alguns exemplos.

	Requisitos de software s√£o as funcionalidades, servi√ßos e restri√ß√µes que definem o que um sistema 
deve fazer e como deve funcionar para atender √†s necessidades e objetivos dos usu√°rios e outras partes interessadas. 
Eles especificam as expectativas para um software, incluindo tanto as tarefas que ele deve realizar (requisitos funcionais) 
quanto as qualidades que deve apresentar, como desempenho, seguran√ßa e usabilidade (requisitos n√£o funcionais). 



8- Qual √© a diferen√ßa entre requisitos funcionais e n√£o funcionais? mostre um exemplo de cada um.

üîπ O que s√£o requisitos de software?

Requisitos de software s√£o descri√ß√µes claras e detalhadas do que o sistema deve fazer (ou das restri√ß√µes que deve obedecer).
Eles s√£o a base de todo o desenvolvimento, pois guiam o projeto, a programa√ß√£o e os testes.

Os requisitos se dividem em duas grandes categorias:

Requisitos funcionais

Definem o que o sistema deve fazer, ou seja, suas funcionalidades.

Relacionam-se diretamente com as tarefas e servi√ßos prestados pelo software.

Requisitos n√£o funcionais

Definem como o sistema deve se comportar ou quais restri√ß√µes deve respeitar.

Est√£o ligados a qualidades como desempenho, seguran√ßa, usabilidade, confiabilidade etc.

üîπ Exemplos
‚úÖ Requisitos funcionais

O sistema deve permitir o cadastro de usu√°rios com nome, e-mail e senha.

O sistema deve gerar relat√≥rios mensais de vendas em PDF.

O sistema deve enviar e-mails autom√°ticos de recupera√ß√£o de senha.

O sistema deve registrar transa√ß√µes de compra com data, valor e cliente.

‚úÖ Requisitos n√£o funcionais

O sistema deve responder √†s requisi√ß√µes em at√© 2 segundos.

O sistema deve estar dispon√≠vel 24 horas por dia, 7 dias por semana.

O acesso deve ser feito apenas com autentica√ß√£o por login e senha criptografada.

A interface deve ser compat√≠vel com navegadores modernos e adapt√°vel a dispositivos m√≥veis.

üëâ Resumindo:

Requisitos de software = necessidades e restri√ß√µes que o sistema deve atender.

Funcionais = descrevem fun√ß√µes.

N√£o funcionais = descrevem caracter√≠sticas de qualidade ou restri√ß√µes.



9- Quais s√£o os meios para execu√ß√£o do levantamento de requisitos?

üîπ Meios mais comuns de levantamento de requisitos

Entrevistas

Conversas estruturadas ou informais com clientes e usu√°rios.

Permite esclarecer d√∫vidas e detalhar expectativas.

Question√°rios/Pesquisas

Aplicados quando h√° muitos usu√°rios envolvidos.

Coletam informa√ß√µes de forma r√°pida e padronizada.

Observa√ß√£o direta (etnografia)

O analista acompanha a rotina do usu√°rio e observa como ele trabalha.

Bom para descobrir necessidades que o usu√°rio n√£o consegue expressar.

Workshops e reuni√µes em grupo

Sess√µes colaborativas para discutir e validar requisitos com v√°rias partes interessadas.

An√°lise de documentos

Estudo de relat√≥rios, planilhas, fluxos de trabalho e sistemas existentes.

Ajuda a entender processos j√° formalizados.

Prototipa√ß√£o

Constru√ß√£o de vers√µes preliminares (prot√≥tipos) para que os usu√°rios visualizem e validem suas necessidades.

Brainstorming

Reuni√£o de ideias entre usu√°rios e equipe para levantar requisitos de forma criativa.

Storytelling / Cen√°rios de uso

Descri√ß√£o de hist√≥rias ou situa√ß√µes reais de uso para identificar funcionalidades necess√°rias.

Modelagem de processos (BPM, fluxogramas)

Representar graficamente como o trabalho √© feito, identificando pontos que o software deve cobrir.

üëâ Em resumo:
O levantamento pode ser feito conversando, observando, analisando documentos ou experimentando prot√≥tipos. 
Normalmente, combina-se v√°rias t√©cnicas para ter uma vis√£o completa e confi√°vel do sistema a ser desenvolvido.



10- O que √© um modelo de requisitos?

Um modelo de requisitos √© uma representa√ß√£o estruturada das necessidades do sistema (funcionalidades, restri√ß√µes e intera√ß√µes), criada para organizar, entender e comunicar os requisitos levantados.

Em vez de listar requisitos apenas em texto, o modelo usa diagramas, descri√ß√µes formais ou estruturadas, facilitando a an√°lise, a comunica√ß√£o com o cliente e servindo de base para as pr√≥ximas fases (projeto, implementa√ß√£o e testes).

üîπ Fun√ß√µes do modelo de requisitos

Organizar e estruturar os requisitos levantados.

Ajudar a visualizar como o sistema deve funcionar.

Reduzir ambiguidades, deixando claro para todos (clientes, desenvolvedores, testadores) o que ser√° feito.

Servir como documento de refer√™ncia para a equipe.

üîπ Exemplos de modelos de requisitos

Casos de uso (UML)

Mostram os atores (usu√°rios ou sistemas externos) e suas intera√ß√µes com o sistema.

Ex.: ‚ÄúUsu√°rio realiza login‚Äù, ‚ÄúGerente gera relat√≥rio de vendas‚Äù.

Diagramas de atividades

Representam fluxos de trabalho ou processos do sistema.

Hist√≥rias de usu√°rio (User Stories)

Descri√ß√µes simples no formato: ‚ÄúComo [tipo de usu√°rio], quero [funcionalidade], para [benef√≠cio].‚Äù

Ex.: ‚ÄúComo cliente, quero recuperar minha senha, para poder acessar minha conta mesmo se esquecer a senha.‚Äù

Modelo de dados (DER ‚Äì Diagrama Entidade-Relacionamento)

Representa as informa√ß√µes que o sistema deve armazenar e como se relacionam.

Prototipa√ß√£o de interface

Prot√≥tipos de telas que ajudam a validar requisitos de usabilidade e navega√ß√£o.

üëâ Resumindo:
O modelo de requisitos √© a tradu√ß√£o dos requisitos coletados em representa√ß√µes visuais e estruturadas, 
para que todos entendam o sistema antes de implement√°-lo.




11- Para conseguir uma entrevista eficaz, que cuidados devem ser tomados?

üîπ Cuidados para uma entrevista eficaz
1. Planejamento da entrevista

Definir o objetivo claro da entrevista (ex.: entender o processo de vendas).

Selecionar quem deve ser entrevistado (usu√°rio final, gerente, cliente, t√©cnico).

Preparar um roteiro de perguntas (abertas e fechadas), mas manter flexibilidade.

Agendar em um hor√°rio adequado, evitando pressa ou interrup√ß√µes.

2. Condu√ß√£o da entrevista

Criar um ambiente de confian√ßa: seja cordial, explique o prop√≥sito da entrevista.

Usar uma linguagem clara e acess√≠vel, evitando termos muito t√©cnicos.

Estimular o entrevistado a falar, ouvindo mais do que falando.

Fazer perguntas abertas (‚ÄúComo voc√™s registram uma venda?‚Äù) e usar fechadas para confirmar detalhes.

Controlar o tempo, evitando se desviar muito do objetivo.

3. Registro das informa√ß√µes

Tomar notas organizadas ou gravar a entrevista (com autoriza√ß√£o).

Anotar n√£o s√≥ as respostas, mas tamb√©m observa√ß√µes de contexto (ex.: dificuldades mencionadas, √™nfases do usu√°rio).

4. P√≥s-entrevista

Revisar as anota√ß√µes logo ap√≥s, para n√£o esquecer detalhes.

Organizar as informa√ß√µes em um documento preliminar de requisitos.

Validar com o entrevistado, enviando um resumo para confirmar se o entendimento est√° correto.

üëâ Em resumo:
Para conseguir uma entrevista eficaz no levantamento de requisitos, √© preciso planejar bem, conduzir com empatia e clareza, 
registrar cuidadosamente e validar as informa√ß√µes.







12- O que √© processo √°gil ?

Um processo √°gil √© uma abordagem de desenvolvimento de software que prioriza flexibilidade, colabora√ß√£o e entregas r√°pidas, em vez de seguir um plano r√≠gido e sequencial.

Ele surgiu para lidar com projetos onde os requisitos podem mudar com frequ√™ncia ou n√£o est√£o totalmente claros no in√≠cio.

üîπ Caracter√≠sticas principais do processo √°gil

Iterativo e incremental

O software √© desenvolvido em pequenas partes (itera√ß√µes ou sprints), entregues rapidamente para feedback do cliente.

Colabora√ß√£o cont√≠nua

Equipes e clientes trabalham juntos durante todo o processo.

Foco no valor para o cliente

Prioriza funcionalidades que realmente trazem benef√≠cios ao usu√°rio final.

Flexibilidade frente a mudan√ßas

Mudan√ßas de requisitos s√£o bem-vindas, mesmo que ocorram tardiamente.

Entrega frequente

Cada itera√ß√£o entrega uma vers√£o funcional parcial, que pode ser testada e avaliada.

Comunica√ß√£o direta

Reuni√µes r√°pidas (ex.: daily stand-up) substituem documenta√ß√£o pesada.

üîπ Exemplos de m√©todos √°geis

Scrum ‚Äì divide o projeto em sprints, com pap√©is definidos (Scrum Master, Product Owner, equipe).

Kanban ‚Äì visualiza o fluxo de trabalho em cart√µes e colunas, melhorando o controle de tarefas.

Extreme Programming (XP) ‚Äì enfatiza boas pr√°ticas de programa√ß√£o, testes constantes e integra√ß√£o cont√≠nua.

üëâ Em resumo:
O processo √°gil foca em entregas r√°pidas, adapta√ß√£o a mudan√ßas e colabora√ß√£o constante com o cliente, sendo ideal para 
projetos din√¢micos e com requisitos em evolu√ß√£o.



13-Quais s√£o as caracter√≠sticas dos processos √°geis?

Principais caracter√≠sticas dos processos √°geis

Iterativo e incremental

O desenvolvimento √© feito em pequenas partes, chamadas de itera√ß√µes ou sprints.

Cada itera√ß√£o entrega uma vers√£o funcional do sistema.

Flexibilidade frente a mudan√ßas

Mudan√ßas nos requisitos podem ser incorporadas mesmo em fases avan√ßadas do projeto.

Entrega cont√≠nua de valor

Funcionalidades importantes s√£o entregues rapidamente para que o cliente possa us√°-las e avaliar.

Colabora√ß√£o intensa

Equipes, clientes e partes interessadas trabalham juntos durante todo o desenvolvimento.

Comunica√ß√£o direta e frequente

Reuni√µes curtas e constantes (ex.: daily stand-ups) substituem documentos extensos.

Foco no cliente e no usu√°rio final

Decis√µes priorizam o valor que ser√° entregue ao usu√°rio.

Simplicidade e adapta√ß√£o

Evita burocracia desnecess√°ria, focando no que realmente agrega valor.

Qualidade incorporada

Testes cont√≠nuos e pr√°ticas de programa√ß√£o (ex.: integra√ß√£o cont√≠nua, refatora√ß√£o) garantem que o software funcione corretamente a cada entrega.

üëâ Resumindo:
Os processos √°geis s√£o flex√≠veis, colaborativos e orientados a entregas r√°pidas e de valor, permitindo que o software evolua de acordo
com as necessidades reais do cliente.




14- Qual √© a diferen√ßa entre o m√©todo SCRUM e XP

√ìtima pergunta! Tanto Scrum quanto XP (Extreme Programming) s√£o m√©todos √°geis, mas t√™m focos e pr√°ticas diferentes.

üîπ Scrum

Foco: Gest√£o do projeto e organiza√ß√£o do trabalho em equipe.

Estrutura: Define pap√©is claros:

Product Owner: define prioridades e requisitos.

Scrum Master: garante que o processo seja seguido.

Equipe de desenvolvimento: constr√≥i o software.

Processo:

Dividido em sprints (geralmente 2‚Äì4 semanas).

Reuni√µes espec√≠ficas: planejamento, daily stand-up, revis√£o e retrospectiva.

Principais pr√°ticas: Gest√£o de backlog, planejamento de sprint, reuni√µes peri√≥dicas e entregas incrementais.

üîπ Extreme Programming (XP)

Foco: Qualidade e boas pr√°ticas de programa√ß√£o.

Processo: Mais t√©cnico e detalhado, enfatizando o c√≥digo e testes.

Principais pr√°ticas:

Programa√ß√£o em par (pair programming)

Desenvolvimento orientado a testes (TDD ‚Äì Test-Driven Development)

Integra√ß√£o cont√≠nua

Refatora√ß√£o constante do c√≥digo

Entregas frequentes de pequenas funcionalidades

Objetivo: Reduzir erros e melhorar a qualidade do software desde o in√≠cio, com feedback r√°pido.

üîπ Resumo da diferen√ßa principal
Aspecto	Scrum	XP
Foco	Gest√£o de projeto e organiza√ß√£o da equipe	Qualidade t√©cnica e boas pr√°ticas de programa√ß√£o
Pap√©is	Product Owner, Scrum Master, Equipe	Menos formal, foco nos programadores
Entregas	Sprints de funcionalidades	Pequenas funcionalidades continuamente
√änfase	Processo e gest√£o	C√≥digo, testes e integra√ß√£o cont√≠nua

üëâ Em resumo:

Scrum organiza como a equipe trabalha.

XP foca em como o software √© desenvolvido tecnicamente.



15- Qual √© o conceito de projeto? Mostre um exemplo.

O conceito de projeto se refere a um esfor√ßo tempor√°rio e planejado para criar um produto, servi√ßo ou resultado √∫nico.

üîπ Caracter√≠sticas de um projeto

Objetivo definido: existe algo espec√≠fico a ser alcan√ßado.

Tempor√°rio: tem in√≠cio e fim determinados.

Produto ou resultado √∫nico: n√£o √© rotina, mas algo novo ou exclusivo.

Recursos limitados: envolve tempo, pessoas, dinheiro e materiais.

Planejamento necess√°rio: para atingir o objetivo com efici√™ncia.

üîπ Exemplo de projeto

Projeto: Desenvolvimento de um sistema de gerenciamento de biblioteca escolar.

Objetivo: Criar um software para controlar empr√©stimos e devolu√ß√µes de livros.

In√≠cio: 1¬∫ de outubro de 2025.

Fim: 31 de dezembro de 2025.

Produto: Sistema informatizado com cadastro de livros, usu√°rios e relat√≥rios de empr√©stimos.

Recursos: 3 desenvolvedores, 1 analista de sistemas, 1 computador por pessoa, or√ßamento de R$ 10.000.

üëâ Em resumo:
Um projeto √© tempor√°rio, planejado e √∫nico, enquanto processos rotineiros (como registrar vendas diariamente) n√£o s√£o considerados projetos.




16- Quais s√£o as ferramentas da an√°lise estruturada?

	DFD N√≠vel 0
	DFD N√≠vel 1
	DD --> Dicion√°rio de dados
	MER

17-Qual √© o objetivo do dep√≥sito de dados no DFD?

No Diagrama de Fluxo de Dados (DFD), o dep√≥sito de dados (tamb√©m chamado de armazenamento de dados) tem como objetivo principal representar onde os dados do sistema s√£o armazenados tempor√°ria ou permanentemente durante o processamento das informa√ß√µes.

üîπ Fun√ß√µes do dep√≥sito de dados no DFD

Guardar informa√ß√µes

Permite que os dados fiquem dispon√≠veis para processos futuros do sistema.

Ex.: cadastro de clientes, pedidos, produtos.

Servir como fonte ou destino de dados

Dados podem entrar em um processo a partir de um dep√≥sito ou ser enviados para armazenamento depois de processados.

Representar persist√™ncia de dados

Diferencia dados tempor√°rios em fluxo de dados armazenados de forma permanente ou semipermanente.

üîπ Exemplo pr√°tico

Dep√≥sito de dados: ‚ÄúTabela de Clientes‚Äù

Fluxos relacionados:

Entrada: ‚ÄúCadastrar cliente‚Äù ‚Üí dados v√£o para o dep√≥sito.

Sa√≠da: ‚ÄúGerar relat√≥rio de clientes‚Äù ‚Üí dados saem do dep√≥sito para o processo.

üëâ Resumindo:
O dep√≥sito de dados no DFD representa o armazenamento de informa√ß√µes, permitindo que processos acessem, 
atualizem e utilizem os dados de forma organizada dentro do sistema.
	



18-Qual √© a finalidade projeto estruturado?

A finalidade do projeto estruturado √© organizar e planejar o desenvolvimento de um sistema de forma clara, l√≥gica e eficiente, 
garantindo que ele atenda aos requisitos do usu√°rio e seja mais f√°cil de implementar, testar e manter.

üîπ Objetivos principais do projeto estruturado

Dividir o sistema em m√≥dulos

Facilita o desenvolvimento e manuten√ß√£o, tornando o sistema mais compreens√≠vel e gerenci√°vel.

Representar processos e dados de forma clara

Utiliza ferramentas como DFD (Diagrama de Fluxo de Dados), fluxogramas e diagramas de estrutura.

Reduzir complexidade

Permite que cada m√≥dulo seja desenvolvido e testado independentemente.

Garantir consist√™ncia e padroniza√ß√£o

Define regras, padr√µes e documenta√ß√£o que facilitam a comunica√ß√£o entre analistas, programadores e usu√°rios.

Facilitar manuten√ß√£o futura

Como o sistema √© bem documentado e modular, altera√ß√µes ou melhorias podem ser feitas sem comprometer o todo.

üîπ Em resumo

O projeto estruturado tem como finalidade principal planejar e organizar o sistema de forma modular, clara e l√≥gica, 
garantindo efici√™ncia no desenvolvimento, facilidade de manuten√ß√£o e atendimento correto aos requisitos do usu√°rio.


19-Qual √© a finalidade do Dicion√°rio de Dados(DD)?

üîπ Dicion√°rio de dados

√â uma documenta√ß√£o detalhada dos dados do sistema.

Descreve cada dado usado: nome, tipo, formato, tamanho, origem, destino e regras de uso.

Pode incluir informa√ß√µes sobre dep√≥sitos de dados, mas tamb√©m sobre dados que circulam nos processos.


A finalidade do Dicion√°rio de Dados (DD) √© documentar detalhadamente todas as informa√ß√µes utilizadas em um sistema, 
servindo como refer√™ncia para analistas, desenvolvedores e testadores.

üîπ Objetivos principais do Dicion√°rio de Dados

Padronizar os dados do sistema

Define nomes, formatos, tipos e tamanhos dos dados, evitando ambiguidades.

Registrar regras e restri√ß√µes

Indica obrigatoriedade, valores permitidos, chaves prim√°rias e relacionamentos entre dados.

Apoiar o projeto e a implementa√ß√£o

Serve de guia para a constru√ß√£o de tabelas de banco de dados, formul√°rios, relat√≥rios e processos.

Facilitar manuten√ß√£o futura

Permite que altera√ß√µes no sistema sejam feitas com seguran√ßa, pois o significado e uso de cada dado est√£o documentados.

Integrar a an√°lise e o projeto estruturado

Relaciona dados que circulam nos processos (DFD) e dep√≥sitos de dados, garantindo consist√™ncia.

üîπ Exemplo simplificado de Dicion√°rio de Dados
Nome do dado	Tipo	Tamanho	Descri√ß√£o	Origem	Destino
NomeCliente	Texto	100	Nome completo do cliente	Formul√°rio Web	Tabela Clientes
DataPedido	Data	-	Data em que o pedido foi feito	Formul√°rio Web	Tabela Pedidos

üëâ Resumindo:
O Dicion√°rio de Dados serve para padronizar, detalhar e documentar os dados do sistema, garantindo clareza, 
consist√™ncia e facilidade de manuten√ß√£o.


20- Qual √© o significado de M-ER? Porque √© usado?

O M-ER significa Modelo Entidade-Relacionamento (√†s vezes chamado apenas de Modelo ER).

üîπ Significado

Modelo Entidade-Relacionamento (M-ER): √© uma representa√ß√£o gr√°fica e conceitual dos dados que ser√£o armazenados em um sistema.

Mostra entidades (objetos do sistema, como ‚ÄúCliente‚Äù ou ‚ÄúProduto‚Äù), atributos (informa√ß√µes sobre as entidades) e relacionamentos entre essas entidades.

üîπ Por que √© usado?

Visualizar a estrutura de dados

Permite entender como os dados se relacionam antes de criar o banco de dados.

Planejar o banco de dados

Serve como base para projetar tabelas, chaves prim√°rias, estrangeiras e relacionamentos.

Evitar redund√¢ncia e inconsist√™ncia

Ajuda a organizar dados de forma l√≥gica e eficiente.

Comunica√ß√£o clara

Facilita a comunica√ß√£o entre analistas, desenvolvedores e clientes, mostrando de forma intuitiva como os dados se conectam.

üîπ Exemplo simplificado de M-ER

Entidades: Cliente, Pedido, Produto

Atributos:

Cliente ‚Üí Nome, CPF, E-mail

Pedido ‚Üí Data, Valor

Produto ‚Üí Nome, Pre√ßo

Relacionamentos:

Um Cliente faz v√°rios Pedidos

Um Pedido cont√©m v√°rios Produtos

üëâ Resumindo:
O M-ER √© usado para modelar dados de forma clara e organizada, servindo como base para criar o banco de dados e garantindo que as 
informa√ß√µes do sistema sejam consistentes e compreens√≠veis.